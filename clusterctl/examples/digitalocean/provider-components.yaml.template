apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: clusterapi-controllers
  labels:
    api: clusterapi
spec:
  replicas: 1
  template:
    metadata:
      labels:
        api: clusterapi
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/notReady
        operator: Exists
      - effect: NoExecute
        key: node.alpha.kubernetes.io/unreachable
        operator: Exists
      containers:
      - name: controller-manager
        image: gcr.io/k8s-cluster-api/controller-manager:0.0.7
        volumeMounts:
          - name: config
            mountPath: /etc/kubernetes
          - name: certs
            mountPath: /etc/ssl/certs
        command:
        - "./controller-manager"
        args:
        - --kubeconfig=/etc/kubernetes/admin.conf
        - --leader-elect
        resources:
          requests:
            cpu: 100m
            memory: 20Mi
          limits:
            cpu: 100m
            memory: 30Mi
      - name: digitalocean-machine-controller
        image: quay.io/kubermatic/digitalocean-machine-controller:0.0.1
        volumeMounts:
          - name: config
            mountPath: /etc/kubernetes
          - name: certs
            mountPath: /etc/ssl/certs
          - name: kubeadm
            mountPath: /usr/bin/kubeadm
          - name: machine-config
            mountPath: /etc/machineconfig
          - name: machine-controller-sshkeys
            mountPath: /etc/sshkeys
        env:
        - name: DIGITALOCEAN_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: digitalocean
              key: token
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command:
        - "./machine-controller"
        args:
        - --kubeconfig=/etc/kubernetes/admin.conf
        - --leader-elect
        - --config=/etc/machineconfig/config.yaml
        resources:
          requests:
            cpu: 200m
            memory: 200Mi
          limits:
            cpu: 400m
            memory: 500Mi
      volumes:
      - name: config
        hostPath:
          path: /etc/kubernetes
      - name: certs
        hostPath:
          path: /etc/ssl/certs
      - name: kubeadm
        hostPath:
          path: /usr/bin/kubeadm
      - name: machine-config
        configMap:
          name: machine-config
      - name: machine-controller-sshkeys
        secret:
          secretName: machine-controller-sshkeys
          defaultMode: 256
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: machine-config
data:
  config.yaml: |-
    items:
    - machineParams:
      - image: ubuntu-18-04-x64
        versions:
          kubelet: 1.11.3
          controlPlane: 1.11.3
      userdata: |
        set -e
        set -x
        (
        ARCH=amd64

        # Obtain Droplet IP addresses.
        HOSTNAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
        PRIVATEIP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address)
        PUBLICIP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)

        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        touch /etc/apt/sources.list.d/kubernetes.list
        sh -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
        apt-get update -y
        apt-get install -y \
            socat \
            ebtables \
            apt-transport-https \
            cloud-utils \
            prips

        # If something failed during package installation but one of docker/kubeadm/kubelet was already installed
        # an apt-mark hold after the install won't do it, which is why we test here if the binaries exist and if
        # yes put them on hold
        set +e
        which docker && apt-mark hold docker docker-ce
        which kubelet && apt-mark hold kubelet
        which kubeadm && apt-mark hold kubeadm

        # When docker is started from within the apt installation it fails with a
        # 'no sockets found via socket activation: make sure the service was started by systemd'
        # Apparently the package is broken in a way that it gets started without its dependencies, manually starting
        # it works fine thought
        which docker && systemctl start docker
        set -e

        function install_configure_docker () {
            # prevent docker from auto-starting
            echo "exit 101" > /usr/sbin/policy-rc.d
            chmod +x /usr/sbin/policy-rc.d
            trap "rm /usr/sbin/policy-rc.d" RETURN

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"

            export CR_PKG=''
            if [ -n "$CR_VERSION" ]; then
                export CR_PKG="$CR_PACKAGE=$CR_VERSION"
            else
                export CR_PKG="$CR_PACKAGE"
            fi

            apt-get install -y ${CR_PKG}
            echo 'DOCKER_OPTS="--iptables=false --ip-masq=false"' > /etc/default/docker
            systemctl daemon-reload
            systemctl enable docker
            systemctl start docker
        }
        install_configure_docker

        # kubeadm uses 10th IP as DNS server
        # CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
        # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
        # search based on our SemVer to find the right (newest) package version.
        function getversion() {
            name=$1
            prefix=$2
            version=$(apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
            if [[ -z "$version" ]]; then
            echo Can\'t find package $name with prefix $prefix
            exit 1
            fi
            echo $version
        }
        KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
        KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
        apt-get install -y \
            kubelet=${KUBELET} \
            kubeadm=${KUBEADM}

        # Override network args to use kubenet instead of cni, override Kubelet DNS args and
        # add cloud provider args.
        # Environment="KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}"
        # TODO: get back here.
        touch /etc/systemd/system/kubelet.service.d/20-kubenet.conf
        cat > /etc/systemd/system/kubelet.service.d/20-kubenet.conf <<EOF
        [Service]
        Environment="KUBELET_EXTRA_ARGS=--allow-privileged=true --cloud-provider=external --authentication-token-webhook=true --read-only-port=0 --cluster-domain=cluster.local --resolv-conf=/run/systemd/resolve/resolv.conf"
        EOF
        systemctl daemon-reload
        systemctl restart kubelet.service

        # Set up kubeadm config file to pass parameters to kubeadm init.
        touch /etc/kubernetes/kubeadm_config.yaml
        cat > /etc/kubernetes/kubeadm_config.yaml <<EOF
        apiVersion: kubeadm.k8s.io/v1alpha1
        kind: MasterConfiguration
        api:
          advertiseAddress: ${PUBLICIP}
          bindPort: ${PORT}
        kubernetesVersion: v${CONTROL_PLANE_VERSION}
        token: ${TOKEN}
        apiServerCertSANs:
        - ${PUBLICIP}
        - ${PRIVATEIP}
        - ${HOSTNAME}
        - 127.0.0.1
        networking:
          podSubnet: ${POD_CIDR}
        EOF

        kubeadm init --config /etc/kubernetes/kubeadm_config.yaml

        for tries in $(seq 1 60); do
            # Annotate node.
            kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node ${HOSTNAME} machine=${MACHINE} && break
            sleep 1
        done

        # Apply Flannel CNI
        kubectl --kubeconfig /etc/kubernetes/admin.conf create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

        echo done.
        ) 2>&1 | tee /var/log/startup.log
    - machineParams:
      - image: ubuntu-18-04-x64
        versions:
          kubelet: 1.11.3
      userdata: |
        set -e
        set -x
        (
        ARCH=amd64

        # Obtain Droplet IP addresses.
        HOSTNAME=$(curl -s http://169.254.169.254/metadata/v1/hostname)
        PRIVATEIP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address)
        PUBLICIP=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)

        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        touch /etc/apt/sources.list.d/kubernetes.list
        sh -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
        apt-get update -y
        DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y \
            curl \
            ca-certificates \
            apt-transport-https \
            cloud-utils \
            ceph-common \
            cifs-utils \
            conntrack \
            e2fsprogs \
            ebtables \
            ethtool \
            glusterfs-client \
            iptables \
            jq \
            prips \
            kmod \
            openssh-client \
            nfs-common \
            socat \
            util-linux \
            open-vm-tools

        # If something failed during package installation but one of docker/kubeadm/kubelet was already installed
        # an apt-mark hold after the install won't do it, which is why we test here if the binaries exist and if
        # yes put them on hold
        set +e
        which docker && apt-mark hold docker docker-ce
        which kubelet && apt-mark hold kubelet
        which kubeadm && apt-mark hold kubeadm

        # When docker is started from within the apt installation it fails with a
        # 'no sockets found via socket activation: make sure the service was started by systemd'
        # Apparently the package is broken in a way that it gets started without its dependencies, manually starting
        # it works fine thought
        which docker && systemctl start docker
        set -e

        function install_configure_docker () {
            # prevent docker from auto-starting
            echo "exit 101" > /usr/sbin/policy-rc.d
            chmod +x /usr/sbin/policy-rc.d
            trap "rm /usr/sbin/policy-rc.d" RETURN

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable"

            export CR_PKG=''
            if [ -n "$CR_VERSION" ]; then
                export CR_PKG="$CR_PACKAGE=$CR_VERSION"
            else
                export CR_PKG="$CR_PACKAGE"
            fi

            apt-get install -y ${CR_PKG}
            echo 'DOCKER_OPTS="--iptables=false --ip-masq=false"' > /etc/default/docker
            systemctl daemon-reload
            systemctl enable docker
            systemctl start docker
        }
        install_configure_docker

        # kubeadm uses 10th IP as DNS server
        # CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
        # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
        # search based on our SemVer to find the right (newest) package version.
        function getversion() {
            name=$1
            prefix=$2
            version=$(apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
            if [[ -z "$version" ]]; then
                echo Can\'t find package $name with prefix $prefix
                exit 1
            fi
            echo $version
        }
        KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
        KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
        apt-get install -y \
            kubelet=${KUBELET} \
            kubeadm=${KUBEADM}

        # Override network args to use kubenet instead of cni, override Kubelet DNS args and
        # add cloud provider args.
        # Environment="KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}"
        # TODO: get back here.
        touch /etc/systemd/system/kubelet.service.d/20-kubenet.conf
        cat > /etc/systemd/system/kubelet.service.d/20-kubenet.conf <<EOF
        [Service]
        Environment="KUBELET_EXTRA_ARGS=--allow-privileged=true --read-only-port=0 --cluster-domain=cluster.local --resolv-conf=/run/systemd/resolve/resolv.conf"
        EOF
        systemctl daemon-reload
        systemctl restart kubelet.service

        kubeadm join --token "${TOKEN}" "${MASTER}" --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification

        for tries in $(seq 1 60); do
            kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node ${HOSTNAME} machine=${MACHINE} && break
            sleep 1
        done
        echo done.
        ) 2>&1 | tee /var/log/startup.log
---
apiVersion: v1
kind: Secret
metadata:
  name: digitalocean
type: Opaque
stringData:
  token: $DIGITALOCEAN_ACCESS_TOKEN
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: machine-controller-sshkeys
  namespace: default
data:
  private: $SSH_PRIVATE_KEY
  public: $SSH_PUBLIC_KEY
